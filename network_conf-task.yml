# Tasks for configuring VPC, Subnet, Internet Gateway, Route Table and Security Group

- name: Ensure that VPC exists
  amazon.aws.ec2_vpc_net:
    name: postgres_demo_vpc
    cidr_block: 10.0.0.0/16
    region: "{{ instance_region }}"
    tags:
      env: demo
    state: present
  register: vpc_net

- name: Ensure that an internet gateway for the VPC exists
  amazon.aws.ec2_vpc_igw:
    vpc_id: "{{ vpc_net.vpc.id }}"
    state: present
    region: "{{ instance_region }}"
    tags:
      env: demo
  register: igw

- name: Ensure that the subnet for the etcd cluster in the VPC exists
  amazon.aws.ec2_vpc_subnet:
    state: present
    vpc_id: "{{ vpc_net.vpc.id }}"
    cidr: 10.0.1.0/24
    map_public: true
    tags:
      Name: etcd-subnet
      env: demo
  register: etcd_subnet

- name: Ensure that the subnet for the patroni cluster in the VPC exists
  amazon.aws.ec2_vpc_subnet:
    state: present
    vpc_id: "{{ vpc_net.vpc.id }}"
    cidr: 10.0.2.0/24
    map_public: true
    tags:
      Name: patroni-subnet
      env: demo
  register: patroni_subnet

- name: Ensure that the subnet for the monitoring cluster in the VPC exists
  amazon.aws.ec2_vpc_subnet:
    state: present
    vpc_id: "{{ vpc_net.vpc.id }}"
    cidr: 10.0.3.0/24
    map_public: true
    tags:
      Name: monitoring-subnet
      env: demo
  register: monitoring_subnet

- name: Ensure that the route table for the VPC exists # So that the subnet can access and be accessed from the internet
  amazon.aws.ec2_vpc_route_table:
    vpc_id: "{{ vpc_net.vpc.id }}"
    region: "{{ instance_region }}"
    tags:
      env: demo
    subnets:
      - "{{ etcd_subnet.subnet.id }}"
      - "{{ patroni_subnet.subnet.id }}"
      - "{{ monitoring_subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
      - dest: ::/0
        gateway_id: "{{ igw.gateway_id }}"
  register: public_route_table

- name: Ensure that the security group exists
  amazon.aws.ec2_security_group:
    name: "Postgres Demo SG"
    description: "Security group for Postgres Demo"
    vpc_id: "{{ vpc_net.vpc.id }}"
    region: "{{ instance_region }}"
    rules:
      - proto: tcp # SSH
        ports:
          - 22
        cidr_ip: "0.0.0.0/0"
      - proto: tcp # Internal etcd communication
        from_port: 2379
        to_port: 2380
        cidr_ip: "10.0.1.0/24"
      - proto: tcp # Internal patroni communication
        ports:
          - 8008
        cidr_ip: "10.0.2.0/24"
      - proto: tcp # patroni <-> prometheus communication
        ports:
          - 8008
        cidr_ip: "10.0.3.0/24"
      - proto: tcp # patroni <-> etcd communication
        from_port: 2379
        to_port: 2380
        cidr_ip: "10.0.2.0/24"
      - proto: tcp # Allow PostgreSQL connections within Patroni subnet
        ports:
          - 5432
        cidr_ip: "10.0.2.0/24"
      - proto: tcp # Allow PgBouncer connections from anywhere
        ports:
          - 6432
        cidr_ip: "0.0.0.0/0"
      - proto: tcp # Postgres_exporter -> Prometheus communication
        ports:
          - 9187
        cidr_ip: "10.0.2.0/24"
      - proto: tcp # Prometheus -> Postgres_exporter communication
        ports:
          - 9187
        cidr_ip: "10.0.3.0/24"
      - proto: tcp # PgBouncer_exporter -> Prometheus communication
        ports:
          - 9127
        cidr_ip: "10.0.2.0/24"
      - proto: tcp # Prometheus -> PgBouncer_exporter communication
        ports:
          - 9127
        cidr_ip: "10.0.3.0/24"
      - proto: tcp # Prometheus <-> Grafana communication
        ports:
          - 9090
        cidr_ip: "10.0.3.0/24"
      - proto: tcp # Allow Grafana connections from anywhere
        ports:
          - 3000
        cidr_ip: "0.0.0.0/0"
    state: present
    tags:
      env: demo
  register: sg

- name: Ensure that a S3 Bucket for Ignition files exists
  amazon.aws.s3_bucket:
    name: private-ign-files
    state: present
    region: "{{ instance_region }}"
    tags:
      Name: private-ign-files
      env: demo
  register: ignitionfiles_bucket
