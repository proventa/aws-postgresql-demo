variant: fcos
version: 1.5.0
passwd:
    users:
      - name: core
        ssh_authorized_keys_local:
          - keys/core.pub
      - name: patroni-user
        ssh_authorized_keys_local:
          - keys/patroni-user.pub
systemd:
    units:
      - name: preparation.service
        enabled: true
        contents: |
          [Unit]
          Description=Preparing Fedora CoreOS for Patroni. Turning SELinux to Permissive, and creating client certs

          ConditionPathExists=/etc/ssl/self-certs/proventa-gencert-config.json
          ConditionFileNotEmpty=/etc/ssl/self-certs/proventa-gencert-config.json

          Requires=network-online.target
          After=network-online.target

          [Service]
          ExecStartPre=/usr/sbin/setenforce 0
          ExecStartPre=/usr/bin/sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
          ExecStart=/usr/local/bin/generate-client-cert.sh
          ExecStartPost=/usr/bin/cp /etc/ssl/self-certs/proventa-root-ca.pem /etc/pki/ca-trust/source/anchors/
          ExecStartPost=/usr/bin/update-ca-trust
          
          RemainAfterExit=yes
          Type=oneshot

          [Install]
          WantedBy=multi-user.target

      - name: patroni.service
        enabled: true
        contents: |
          [Unit]
          Description=Patroni (Spilo) with Podman

          ConditionPathExists=/etc/patroni-env
          ConditionFileNotEmpty=/etc/patroni-env

          After=preparation.service

          [Service]
          User=patroni-user
          EnvironmentFile=/etc/patroni-env
          Restart=always
          RestartSec=5s
          TimeoutStartSec=0
          LimitNOFILE=40000

          ExecStartPre=/usr/bin/loginctl enable-linger patroni-user
          ExecStartPre=/usr/bin/mkdir -p ${HOME}/patroni
          ExecStartPre=/usr/bin/podman rm -f patroni-container
          ExecStartPre=/usr/local/bin/prepare-certs.sh
          ExecStart=/usr/bin/podman \
            run \
            --rm \
            --net=host \
            --name patroni-container \
            --volume /etc/ssl/self-certs:/etc/ssl/self-certs \
            --volume patroni-certs:/etc/ssl/patroni-certs \
            --volume ${HOME}/patroni:/home/postgres/pgdata \
            --env SCOPE=superman \
            --env PGVERSION=15 \
            --env ETCD3_PROTOCOL="https" \
            --env ETCD3_HOSTS="${ETCD_HOSTS}" \
            --env ETCD3_CACERT="/etc/ssl/self-certs/proventa-root-ca.pem" \
            --env ETCD3_CERT="/etc/ssl/self-certs/proventa-client-cert.pem" \
            --env ETCD3_KEY="/etc/ssl/self-certs/proventa-client-cert-key.pem" \
            --env AWS_REGION="eu-central-1" \
            --env WAL_S3_BUCKET="patroni-demo-bucket" \
            --env AWS_ROLE_ARN="${AWS_ROLE_ARN}" \
            --env USE_WALG_BACKUP="true" \
            --env USE_WALG_RESTORE="true" \
            --env WALG_COMPRESSION_METHOD="brotli" \
            ghcr.io/zalando/spilo-15:3.0-p1

          ExecStop=/usr/bin/podman rm -f patroni-container

          [Install]
          WantedBy=multi-user.target

      - name: pgbouncer.service
        enabled: true
        contents: |
          [Unit]
          Description=PgBouncer Connection pooling with Podman

          [Service]
          User=patroni-user
          Restart=always
          RestartSec=5s
          TimeoutStartSec=0
          LimitNOFILE=40000

          ExecStartPre=/usr/local/bin/prepare_pgbouncer_auth.sh patroni-container postgres postgres
          ExecStartPre=/usr/bin/podman rm -f pgbouncer-container
          ExecStart=/usr/bin/podman \
            run \
            --rm \
            --net=host \
            --name pgbouncer-container \
            --volume /etc/ssl/self-certs:/etc/ssl/self-certs \
            --volume /usr/local/share/userlist.txt:/tmp/userlist.txt \
            --env DB_HOST="localhost" \
            --env DB_NAME="postgres" \
            --env DB_PORT="5432" \
            --env AUTH_USER="pgbouncer" \
            --env AUTH_FILE="/tmp/userlist.txt" \
            --env AUTH_QUERY="SELECT username, password FROM pgbouncer.get_auth($1)" \
            --env AUTH_TYPE="scram-sha-256" \
            --env STATS_USERS="stats_collector" \
            --env LISTEN_PORT="6432" \
            --env CLIENT_TLS_SSLMODE="require" \
            --env CLIENT_TLS_KEY_FILE="/etc/ssl/self-certs/proventa-client-cert-key.pem" \
            --env CLIENT_TLS_CERT_FILE="/etc/ssl/self-certs/proventa-client-cert.pem" \
            --env CLIENT_TLS_CA_FILE="/etc/ssl/self-certs/proventa-root-ca.pem" \
            docker.io/edoburu/pgbouncer:1.20.1-p0

          ExecStop=/usr/bin/podman rm -f pgbouncer-container

          [Install]
          WantedBy=multi-user.target

      - name: pg-exporter.service
        enabled: true
        contents: |
          [Unit]
          Description=Postgres Exporter with Podman

          After=pgbouncer.service

          [Service]
          User=patroni-user
          Restart=always
          RestartSec=5s
          TimeoutStartSec=0
          LimitNOFILE=40000

          ExecStartPre=/usr/bin/podman rm -f pg-exporter-container
          ExecStart=/usr/bin/podman run \
            --rm \
            --name pg-exporter-container \
            --net=host \
            --volume=/etc/ssl/self-certs:/etc/ssl/self-certs \
            --volume=/usr/local/share/web-config.yml:/etc/web-config.yml \
            --env DATA_SOURCE_URI="localhost:5432" \
            --env DATA_SOURCE_USER="postgres" \
            --env DATA_SOURCE_PASS="zalando" \
            quay.io/prometheuscommunity/postgres-exporter \
              --web.config.file=/etc/web-config.yml \
              --collector.process_idle \
              --collector.postmaster

          ExecStop=/usr/bin/podman rm -f pg-exporter-container

          [Install]
          WantedBy=multi-user.target

      - name: pgbouncer-exporter.service
        enabled: true
        contents: |
          [Unit]
          Description=PgBouncer Exporter with Podman

          After=pgbouncer.service

          [Service]
          User=patroni-user
          Restart=always
          RestartSec=5s
          TimeoutStartSec=0
          LimitNOFILE=40000

          ExecStartPre=/usr/bin/podman rm -f pgbouncer-exporter-container
          ExecStart=/usr/bin/podman run \
            --rm \
            --name pgbouncer-exporter-container \
            --net=host \
            --volume=/etc/ssl/self-certs:/etc/ssl/self-certs \
            --volume=/usr/local/share/web-config.yml:/etc/web-config.yml \
            docker.io/prometheuscommunity/pgbouncer-exporter \
              --web.config.file=/etc/web-config.yml \
              --pgBouncer.connectionString="postgresql://stats_collector:collector_stats@localhost:6432/pgbouncer"

          ExecStop=/usr/bin/podman rm -f pgbouncer-exporter-container

          [Install]
          WantedBy=multi-user.target

      - name: airlock.service
        enabled: true
        contents: |
          [Unit]
          Description=airlock with Podman

          After=preparation.service
          Requires=preparation.service

          [Service]
          User=patroni-user
          Restart=always
          RestartSec=5s
          TimeoutStartSec=0
          LimitNOFILE=40000

          ExecStartPre=/usr/bin/loginctl enable-linger patroni-user
          ExecStartPre=/usr/local/bin/prepare-airlock.sh
          ExecStartPre=/usr/bin/podman rm -f airlock-container
          ExecStart=/usr/bin/podman \
            run \
            --rm \
            --net=host \
            --name airlock-container \
            --volume=/etc/ssl/certs:/etc/ssl/certs \
            --volume=/etc/ssl/self-certs:/etc/ssl/self-certs \
            --volume=${HOME}/airlock-config.toml:/etc/airlock/config.toml \
            quay.io/coreos/airlock:main \
            airlock serve -vv
          ExecStop=/usr/bin/podman rm -f airlock-container

          [Install]
          WantedBy=multi-user.target
storage:
    files:
        - path: /etc/zincati/config.d/55-updates-strategy.toml
          contents:
            inline: |
              [updates]
              strategy = "fleet_lock"
              [updates.fleet_lock]
              base_url = "http://127.0.0.1:3333"

        - path: /etc/zincati/config.d/90-custom-identity.toml
          contents:
            inline: |
              [identity]
              group = "patroni"

        - path: /usr/local/bin/prepare-airlock.sh
          mode: 0755
          contents:
            inline: |
              #!/bin/bash

              # Get etcd ip address from patroni-env file and format it accordingly
              ETCD_HOSTS=$(grep ETCD_HOSTS /etc/patroni-env | cut -d '=' -f2 | sed 's/,/","/g' | sed 's/10/https:\/\/10/g')

              # Get private ip
              PRIVATE_IP=$(hostname -I | cut -d ' ' -f1)

              cat <<EOF > $HOME/airlock-config.toml
              # Status service configuration
              [status]
              enabled = true
              address = "$PRIVATE_IP"
              port = 2222
              tls = false

              # Main service configuration
              [service]
              address = "$PRIVATE_IP"
              port = 3333
              tls = false

              # Etcd-v3 client configuration
              [etcd3]
              endpoints = [ $ETCD_HOSTS ]
              client_cert_pub_path = "/etc/ssl/self-certs/proventa-client-cert.pem"
              client_cert_key_path = "/etc/ssl/self-certs/proventa-client-cert-key.pem"

              # Lock configuration, base reboot group
              [lock]
              default_group_name = "default"
              default_slots = 2
              
              # Additional reboot groups
              [[lock.groups]]
              name = "patroni"
              slots = 1
              EOF

        - path: /etc/patroni-env
          mode: 0755
          contents:
            local: tmp/patroni-env

        - path: /etc/ssl/self-certs/proventa-root-ca.pem
          mode: 0644
          contents:
            local: certs/proventa-root-ca.pem

        - path: /etc/ssl/self-certs/proventa-gencert-config.json
          mode: 0644
          contents:
            local: certs/proventa-gencert-config.json

        - path: /etc/ssl/self-certs/proventa-root-ca-key.pem
          mode: 0644
          contents:
            local: certs/proventa-root-ca-key.pem

        - path: /usr/local/bin/generate-client-cert.sh
          mode: 0755
          contents:
            local: scripts/generate-client-cert.sh

        - path: /usr/local/bin/prepare_pgbouncer_auth.sh
          mode: 0755
          contents:
            local: scripts/prepare_pgbouncer_auth.sh

        - path: /usr/local/share/userlist.txt
          mode: 0644
          contents:
            local: tmp/userlist.txt

        - path: /usr/local/share/web-config.yml
          mode: 0644
          contents:
            inline: |
              tls_server_config:
                cert_file: /etc/ssl/self-certs/proventa-client-cert.pem
                key_file: /etc/ssl/self-certs/proventa-client-cert-key.pem
                client_auth_type: "RequireAndVerifyClientCert"
                client_ca_file: /etc/ssl/self-certs/proventa-root-ca.pem

        - path: /usr/local/share/postgres_exporter.yml
          mode: 0644
          contents:
            local: cluster-patroni/postgres_exporter.yml

        - path: /usr/local/bin/prepare-certs.sh
          mode: 0755
          contents:
            inline: |
              #!/bin/bash

              set -e

              # Delete patroni-certs volume if exists
              podman volume rm -f patroni-certs || true

              # Create patroni-certs volume
              podman volume create patroni-certs

              # Copy certs to patroni-certs volume
              cp /etc/ssl/self-certs/proventa-client-cert-key.pem $HOME/.local/share/containers/storage/volumes/patroni-certs/_data/proventa-client-cert-key.pem
              cp /etc/ssl/self-certs/proventa-client-cert.pem $HOME/.local/share/containers/storage/volumes/patroni-certs/_data/proventa-client-cert.pem
              cp /etc/ssl/self-certs/proventa-root-ca.pem $HOME/.local/share/containers/storage/volumes/patroni-certs/_data/proventa-root-ca.pem

              # Change permissions
              chmod 640 $HOME/.local/share/containers/storage/volumes/patroni-certs/_data/proventa-client-cert-key.pem