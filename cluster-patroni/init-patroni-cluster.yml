- name: Create Fedora CoreOS and its needed resources
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    instance_type: t3.small # Machine type smaller than this is not recommended, because it would take too long to start
    instance_count: 3
    instance_region: eu-central-1
    instance_region_az: eu-central-1a
    ami_id: ami-04d3750b706767b83 # Fedora CoreOS
    s3_bucket_name: patroni-demo-bucket
    etcd_tags:
      cluster: etcd
      env: demo
    ec2_tags:
      cluster: patroni
      env: demo
  tasks:
    - name: Prepare all folders needed
      ansible.builtin.file:
        path: "../{{ item }}"
        state: directory
      with_items:
        - tmp
        - keys
        - bin
        - certs

    - include_tasks: ../network_conf-task.yml

    - include_tasks: ../keys_and_certs-task.yml

    - name: Get etcd EC2 Instances
      amazon.aws.ec2_instance_info:
        region: "{{ instance_region }}"
        filters:
          "tag:cluster": "{{ etcd_tags.cluster }}"
          "tag:env": "{{ etcd_tags.env }}"
          "instance-state-name": running
      register: ec2_instances

    - name: Get Private DNS of the etcd Cluster
      set_fact:
        private_ips: "{{ ec2_instances.instances | map(attribute='private_ip_address') | list }}"

    - name: Create IP Addresses File
      ansible.builtin.template:
        src: ip_addresses_template.j2
        dest: ../tmp/patroni-env

    - name: Ensure that a S3 Bucket for WAL backups exists
      amazon.aws.s3_bucket:
        name: "{{ s3_bucket_name }}"
        state: present
        region: "{{ instance_region }}"
        tags:
          Name: "{{ s3_bucket_name }}"
          env: demo
      register: s3_bucket

    - name: Create IAM Role for Patroni WAL
      community.aws.iam_role:
        name: PatroniWALRole
        state: present
        region: "{{ instance_region }}"
        assume_role_policy_document: "{{ lookup('file', './assume_role_policy.json')|string }}"
        tags:
          Name: PatroniWALRole
          env: demo
      register: iam_role

    - name: Save the IAM Role ARN to a file
      ansible.builtin.shell: echo "\nAWS_ROLE_ARN={{ iam_role.arn }}" >> ../tmp/patroni-env
    
    - name: Attach S3 Policy to Patroni WAL Role
      amazon.aws.iam_policy:
        policy_name: PatroniWALPolicy
        iam_type: role
        iam_name: "{{ iam_role.role_name }}"
        state: present
        region: "{{ instance_region }}"
        policy_json : "{{ lookup('file', './patroni-wal-role-policy.json')|string }}"

    - name: Prepare ignition file # Converting Butane to Ignition
      ansible.builtin.shell: podman run --interactive --rm --security-opt label=disable --volume ${PWD}/../:/pwd --workdir /pwd quay.io/coreos/butane:release -d /pwd --pretty --strict cluster-patroni/butane.patroni.yaml > ../tmp/patroni.ign

    - name: Start Fedora CoreOS instances
      amazon.aws.ec2_instance:
        state: running
        instance_type: "{{ instance_type }}"
        image_id: "{{ ami_id }}"
        count: "{{ instance_count }}"
        region: "{{ instance_region }}"
        network:
          assign_public_ip: true
        security_group: "{{ sg.group_name }}"
        vpc_subnet_id: "{{ patroni_subnet.subnet.id }}"
        key_name: "{{ key_pair.key.name }}"
        tags: "{{ ec2_tags }}"
        user_data: "{{ lookup('file', '../tmp/patroni.ign')|string }}"
        iam_instance_profile: "{{ iam_role.role_name }}"
      register: ec2_instance

    - name: Create target list
      set_fact:
        target_list: "{{ target_list | default([]) + [{'Id': item, 'Port': 5432}] }}"
      loop: "{{ ec2_instance.changed_ids }}"

    - name: Ensure Target Group for Patroni cluster exist
      community.aws.elb_target_group:
        name: patroni-tg
        region: "{{ instance_region }}"
        vpc_id: "{{ vpc_net.vpc.id }}"
        protocol: tcp
        port: 5432
        health_check_protocol: http
        health_check_path: /
        health_check_port: 8008
        successful_response_codes: "200,503" # 200 is for master and 503 is for replicas
        target_type: instance
        targets: "{{ target_list }}"
        state: present
      register: tg

    - name: Ensure Network Load Balancer for Patroni cluster exist
      community.aws.elb_network_lb:
        name: patroni-nlb
        subnets:
          - "{{ patroni_subnet.subnet.id }}"
        state: present
        listeners:
          - Protocol: TCP
            Port: 5432
            DefaultActions:
              - Type: forward
                TargetGroupArn: "{{ tg.target_group_arn  }}"
      register: nlb
