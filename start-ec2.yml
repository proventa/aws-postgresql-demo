- name: Create Fedora CoreOS and its needed resources
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    num_of_instances: 2
    inventory_file: /root/aws-postgresql-demo/ansible/hosts
    ec2_tags:
      cluster: etcd
    ssh_priv_key: /root/aws-postgresql-demo/keys/postgres-demo
  tasks:
    - name: Ensure that VPC exists
      amazon.aws.ec2_vpc_net:
        name: postgres_demo_vpc
        cidr_block: 10.0.0.0/16
        region: eu-central-1
        tags:
          env: demo
        state: present
      register: vpc_net

    - name: Ensure that the subnet for etcd exists
      amazon.aws.ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc_net.vpc.id }}"
        cidr: 10.0.0.0/16
        map_public: true
        tags:
          Name: etcd-subnet
      register: etcd_subnet

    - name: Ensure that the security group exists
      amazon.aws.ec2_security_group:
        name: "Postgres Demo SG"
        description: "Allow SSH"
        vpc_id: "{{ vpc_net.vpc.id }}"
        region: eu-central-1
        rules:
          - proto: tcp
            ports:
              - 22
            cidr_ip: "0.0.0.0/0"
        tags:
          env: demo
        state: present
      register: sg

    - name: create key pair using key_material obtained using 'file' lookup plugin
      amazon.aws.ec2_key:
        name: postgres-demo
        key_material: "{{ lookup('file', '/root/aws-postgresql-demo/keys/postgres-demo.pub') }}"
      register: key_pair

    - name: Start Fedora CoreOS instances
      amazon.aws.ec2_instance:
        instance_type: t2.micro
        image_id: ami-01616b3a6ec881521 # Fedora CoreOS
        count: "{{ num_of_instances }}"
        region: eu-central-1
        network:
          assign_public_ip: true
          security_group_id: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ etcd_subnet.subnet.id }}"
        state: running
        key_name: "{{ key_pair.key.name }}"
        tags: "{{ ec2_tags }}"
        user_data: "./transpiled_config.ign" # To be changed
      register: ec2_instance

    - name: Ensure the group [ "{{ ec2_tags.cluster }}" ] exists in the inventory file
      ansible.builtin.lineinfile:
        path: "{{ inventory_file }}"
        line: "[ {{ ec2_tags.cluster }} ]"
        state: present
      
    - name: Add the insance ID to the group 'etcd' in the inventory file
      ansible.builtin.lineinfile:
        path: "{{ inventory_file }}"
        line: "{{ item.instance_id }} ansible_host={{ item.public_ip_address }} ansible_ssh_private_key_file={{ ssh_priv_key }} ansible_user=core"
        insertafter: "{{ ec2_tags.cluster }}"
        state: present
      with_items: "{{ ec2_instance.instances }}"